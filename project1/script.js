// ‚úÖ Smart Todo App so zmazan√≠m √∫loh a localStorage

console.log("script loaded"); // log do konzoly ≈æe sa skript naƒç√≠tal

// üè≠ Factory funkcia na vytvorenie novej √∫lohy
function createTodo(text) {
  return {
    id: Date.now(), // unik√°tne ID podƒæa ƒçasu
    text: text, // text √∫lohy
    completed: false, // ƒçi je √∫loha hotov√°
  };
}

// üíæ Funkcia na ulo≈æenie aktu√°lneho zoznamu √∫loh do localStorage
function saveTodosToLocalStorage() {
  // üíæ Ulo≈æ√≠ aktu√°lny stav zoznamu do localStorage ako string
  // Ulo≈æen√≠m cel√©ho taskList prep√≠≈°eme star≈°iu verziu ‚Äì t√Ωm sa "zma≈æe" aj vymazan√° √∫loha
  localStorage.setItem("todos", JSON.stringify(taskList)); // prevedieme pole na string a ulo≈æ√≠me pod kƒæ√∫ƒçom "todos"
}

// üîÑ Funkcia na naƒç√≠tanie √∫loh z localStorage pri naƒç√≠tan√≠ str√°nky
function loadTodosFromLocalStorage() {
  const saved = localStorage.getItem("todos"); // naƒç√≠tame ulo≈æen√Ω string zo storage

  if (saved) {
    const parsed = JSON.parse(saved); // prevedieme string nasp√§≈• na pole objektov
    taskList.push(...parsed); // vlo≈æ√≠me naƒç√≠tan√© √∫lohy do n√°≈°ho zoznamu
    renderTodos(getFilteredTodos()); // zobraz√≠me filtrovan√Ω zoznam (napr. v≈°etky)
  }
}

// FILTROVANIE
// "all" = v≈°etky √∫lohy
// "completed" = len hotov√©
// "active" = len nehotov√©

// üîß Prid√°me premen√∫ pre aktu√°lny filter:
let currentFilter = "all"; // predvolene zobraz√≠me v≈°etko

// üîß Pomocn√° funkcia, ktor√° vr√°ti pole √∫loh podƒæa zvolen√©ho filtra
function getFilteredTodos() {
  if (currentFilter === "completed") {
    return taskList.filter((todo) => todo.completed);
  } else if (currentFilter === "active") {
    return taskList.filter((todo) => !todo.completed);
  }
  return taskList; // default: v≈°etko
}

const taskList = []; // hlavn√Ω zoznam √∫loh (pam√§≈• aplik√°cie)

// üé® Funkcia na vykreslenie v≈°etk√Ωch √∫loh do HTML
function renderTodos(todos) {
  const list = document.getElementById("todo-list"); // zoberieme <ul> z HTML
  list.innerHTML = ""; // vyƒçist√≠me predch√°dzaj√∫ci obsah

  todos.forEach((todo) => {
    const li = document.createElement("li"); // vytvor√≠me nov√Ω <li> pre ka≈æd√∫ √∫lohu
    li.setAttribute("data-status", todo.completed ? "done" : "undone");

    const checkbox = document.createElement("input"); // vytvor√≠me checkbox
    checkbox.type = "checkbox";
    checkbox.checked = todo.completed; // nastav√≠me, ƒçi je za≈°krtnut√Ω
    checkbox.addEventListener("change", () => {
      todo.completed = checkbox.checked; // aktualizujeme stav √∫lohy
      renderTodos(getFilteredTodos());
      saveTodosToLocalStorage(); // ulo≈æ√≠me zmenu do storage
    });

    const p = document.createElement("p"); // vytvor√≠me <p> pre text √∫lohy
    p.textContent = todo.text;

    const deleteBtn = document.createElement("button"); // tlaƒçidlo na zmazanie
    deleteBtn.textContent = "üóëÔ∏è";
    deleteBtn.setAttribute("aria-label", "delete task"); // pre ƒç√≠taƒçky obrazovky
    deleteBtn.addEventListener("click", () => {
      const index = taskList.findIndex((t) => t.id === todo.id); // n√°jdeme index √∫lohy
      if (index !== -1) {
        taskList.splice(index, 1); // vyma≈æeme √∫lohu zo zoznamu
        renderTodos(getFilteredTodos()); // znova prekresl√≠me
        saveTodosToLocalStorage(); // ulo≈æ√≠me zmenu
      }
    });

    // prid√°me v≈°etky elementy do <li> a n√°sledne do zoznamu
    li.appendChild(checkbox);
    li.appendChild(p);
    li.appendChild(deleteBtn);
    list.appendChild(li);
  });
}

loadTodosFromLocalStorage(); // naƒç√≠tame √∫lohy po naƒç√≠tan√≠ str√°nky

// üßæ Prid√°vanie novej √∫lohy po kliknut√≠ na tlaƒçidlo
const input = document.getElementById("todo-input"); // input pre text √∫lohy
const addButton = document.getElementById("add-task"); // tlaƒçidlo "Prida≈• √∫lohu"

addButton.addEventListener("click", () => {
  const text = input.value.trim(); // zoberieme text z inputu a odstr√°nime medzery
  if (text === "") {
    alert("Please enter task description!"); // ak je pr√°zdny, upozorn√≠me
    return;
  }

  const newTask = createTodo(text); // vytvor√≠me nov√∫ √∫lohu
  taskList.push(newTask); // prid√°me do zoznamu
  renderTodos(getFilteredTodos()); // vykresl√≠me
  saveTodosToLocalStorage(); // ulo≈æ√≠me do localStorage
  input.value = ""; // vyƒçist√≠me input
});

// filtrovanie

document.getElementById("filter_all").addEventListener("click", () => {
  currentFilter = "all"; // zobraz√≠ v≈°etko
  renderTodos(getFilteredTodos());
});

document.getElementById("filter_done").addEventListener("click", () => {
  currentFilter = "completed"; // zobraz√≠ len hotov√©
  renderTodos(getFilteredTodos());
});

document.getElementById("filter_undone").addEventListener("click", () => {
  currentFilter = "active"; // zobraz√≠ len nehotov√©
  renderTodos(getFilteredTodos());
});
